document ::= stmt*;
stmt ::= universal-stmt | css-stmt | top-stmt | other-stmt;

stmt-no-top ::= universal-stmt | css-stmt | other-stmt;
universal-stmt ::= var-decl | flow-control-at-rule | debug-at-rule;
css-stmt ::= style-rule | css-at-rule | l-include | l-at-root;
top-stmt ::= l-import | l-use | l-fwd | b-mixin | b-function;
other-stmt ::= prop-decl | l-extend;

var-decl ::= var-name ":" expr;
prop-decl ::= ident ":" expr;

l-import ::= "@import" str-list;
l-use ::= "@use" str-quoted "as" (ident | "*")
        | "@use" str-quoted "with" "(" kv-pairs ")"
        | "@use" str-quoted "as" (ident | "*") "with" "(" kv-pairs ")";
l-fwd ::= "@use" str-quoted "as" fwd-prefix ("with" "(" kv-pairs ")")?;
fwd-prefix ::= "pref" "*";

l-include ::= "@include" ident ("(" arg-list ")")?;
l-extend ::= "@extend" complex-selector;
l-at-root ::= "@at-root" complex-selector  stmt+;
debug-at-rule ::= ("@error" expr) | ("@warn" expr) | ("@debug" expr);

b-mixin ::= "@mixin" ident ("(" arg-list ")")?  stmt-no-top+;
b-function ::= "@function" ident ("(" arg-list ")")  (universal-stmt | l-at-return)+;
l-at-return ::= "@return" expr;

flow-control-at-rule ::= control-if | control-each | control-for | control-while;

control-if ::= (b-if  b-elif*)  b-else?;
b-if ::= (("@if" expr)  stmt-no-top+);
b-elif ::= (("@else" "if" expr)  stmt-no-top+);
b-else ::= ("@else" stmt-no-top+);


control-each ::= control-each-list | control-each-destructure;
control-each-list ::= (("@each" var-name "in" expr)  stmt-no-top+);
control-each-destructure ::= (("@each" variable-list-alt "in" expr)  stmt-no-top+);

kv-pairs ::= (kv-pair ",")* kv-pair;
kv-pair ::= var-name ":" expr;

control-for ::= (("@for" var-name "from" expr ("to" | "through") expr)  stmt-no-top+);

control-while ::= (("@while" expr)  stmt-no-top+);

// css-at-rule, style-rule, expr
css-at-rule ::= css-media | css-supports | css-keyframes;

// https://developer.mozilla.org/zh-CN/docs/Web/CSS/@media
css-media ::= (("@media" media-query-list)  stmt-no-top+);
media-query-list ::= (media-query ",")* media-query;
media-query ::= media-condition | ("not" | "only")? media-type ("and" media-condition-without-or)?;
media-condition ::= media-not | media-and | media-or | media-in-parens;
media-condition-without-or ::= media-not | media-and | media-in-parens;
media-type ::= ident;

media-not ::= "not" media-in-parens;
media-and ::= media-in-parens ("and" media-in-parens)+;
media-or ::= media-in-parens ("or" media-in-parens)+;
media-in-parens ::= "(" media-condition ")" | media-feature;
// general-enclosed is removed here, since it is designed for future use.
// https://drafts.csswg.org/css-syntax-3/#any-value

media-feature ::= "(" ( (ident ":" expr) | ident | mf-range ) ")";
mf-range ::= ident ("<" | ">" | "<=" | ">=")? expr
          | expr ("<" | ">" | "<=" | ">=")? ident
          | expr ("<" | "<=") ident ("<" | "<=") expr
          | expr (">" | ">=") ident (">" | ">=") expr;

// css supports
css-supports ::= (("@supports" supports-condition)  stmt-no-top+);
supports-condition ::= "not" supports-in-parens
                     | supports-in-parens
                     | supports-in-parens ("and" supports-in-parens)+
                     | supports-in-parens ("or" supports-in-parens)+;
supports-in-parens ::= "(" supports-condition ")" | supports-feature;
supports-feature ::= supports-decl; // selector() is still experimental, not implemented here
supports-decl ::= "(" prop-decl ")";

style-rule ::= (complex-selector stmt-no-top+);
// selectors
complex-selector ::= compound-selector ( combinator compound-selector )*;
compound-selector ::= (type-selector)
                    | (subclass-selector+)
                    | (( pseudo-element-selector pseudo-class-selector* )+)
                    | (type-selector subclass-selector+)
                    | (type-selector ( pseudo-element-selector pseudo-class-selector* )+ )
                    | (subclass-selector+ ( pseudo-element-selector pseudo-class-selector* )+ )
                    | (type-selector subclass-selector+ ( pseudo-element-selector pseudo-class-selector* )+)
                    ;
combinator ::= ">" | "+" | "~" | "||" | " ";
type-selector ::= wq-name | ns-prefix? "*";
wq-name ::= ns-prefix? ident;
ns-prefix ::= "ns|" | "|";
subclass-selector ::= id-selector | class-selector | attribute-selector | pseudo-class-selector;
id-selector ::= "#" ident;
class-selector ::= "." ident;
attribute-selector ::= "[" wq-name "]"
                     | "[" wq-name attr-matcher (str-quoted | ident) attr-modifier? "]";
attr-matcher ::= ("~" | "|" | "^" | "$" | "*")? "=";
attr-modifier ::= "i" | "s";

pseudo-element-selector ::= "::" ident;
pseudo-class-selector ::= ":" ident;


// keyframes
css-keyframes ::= (("@keyframes" keyframes-name)  keyframe-block-list);
keyframes-name ::= ident | str-quoted;
keyframe-block-list ::= keyframe-block+;
keyframe-block ::= ( ((keyframe-selector ",")* keyframe-selector)  (prop-decl | var-decl)+ );
keyframe-selector ::= "from" | "to" | percentage;
percentage ::= number "%"; // omit signs


// Basic Tokens
var-name ::= "$var";
ident ::= "id";
expr ::= "100px";
str-quoted ::= '"string"';
number ::= "123";

str-list ::= (str-quoted ',')* str-quoted;
any-token ::= "token";

variable-list ::= (var-name ",")* var-name;
variable-list-alt ::= (var-name ",")+ var-name;

arg-list ::= ( (var-name | var-name-with-default) "," )* (var-name | var-name-with-default | var-name-with-ellipsis);
var-name-with-ellipsis ::= var-name "...";
var-name-with-default ::= var-name ":" expr;
